# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

alias ll='ls -lhA'
alias clrscr='cat /dev/null > ~/.bash_history && history -c && history -w && clear'
alias resetscr='cat /dev/null > ~/.bash_history && history -c && history -w && reset'
#alias mkcd='_(){ mkdir $1; cd $1; }; _'
alias fullpermi='_(){ sudo chmod -R 777 $1; }; _'
alias importmydblocal='_(){ mysql -u root -p $1 < $2; }; _'
alias fullpermiweb='_(){ sudo chmod -R 777 /var/www/html/$1; }; _'
alias listbyname='_(){ find . -iname $1 -exec readlink -f {} + | tee ./$1.txt; }; _'
alias dfdisk="df -Tha --total"
alias wgetc="wget -c"
alias ls='ls --color=auto'

replinallfiles() {
	find ./ -type f -readable -writable -exec sed -i "s/$1/$2/g" {} \;
}
# alias replinfiles=replinallfiles

rendirs() {
	shopt -s globstar
	rename "s/$1/$2/" **
}

findinfiles() {
	needle=$1;
	haystack=/var/www/html/$2;
	grep -rnl -F --include=*.{php,phtml,xml,css,html} $needle $haystack;
}

listfiles() {
	find . -type f -follow -print > modfiles.list;
	find . -type f -follow -print > files.txt;
}

makelistoffiles() {
	fileName="${PWD##*/}";
	find . -type f -not -name '*~' > "$fileName".txt
}

deletebakfiles() {
	find . -type f -name '*~' -delete
	find . -type f -name '.*' -delete
}

clearlocal() {
	rm -rf /var/www/html/$1/var/cache/*
	#rm -rf /var/www/html/$1/var/session/*
	#rm -rf /var/www/html/$1/var/import/*
	rm -R -f /var/www/html/$1/media/catalog/product/cache
	rm -rf /var/www/html/$1/var/debug/*
	rm -rf /var/www/html/$1/var/log/*
}

zipwithperms() {
	sudo chmod -R 777 $1
	sudo zip -r $1 "$2.zip"
	sudo chmod -R 777 "$2.zip"
}

renfiles() {
	find . -name "*$1*" -exec bash -c "mv $0 ${0/$1/$2}" {} \;
}

clearErrorLog() {
	sudo truncate -s0 /var/log/apache2/error.log
}

openErrorLog() {
	sudo gedit /var/log/apache2/error.log
}

rename_mage_module() {
	find ./ -type f -readable -writable -exec sed -i "s/$1/$2/g" {} \;
	shopt -s globstar && rename "s/$1/$2/" **;
	find . -name "*$1*" -exec bash -c "mv $0 ${0/$1/$2}" {} \;
}

compress_dir() {
	NOW=$(date +"%m-%d-%Y");
	CURRTIME=$(date +"%T");
	CURRDATE=$(date +"%F");
	#NOW="$CURRDATE_$CURRTIME";
	sudo tar -cvjSf $1_$NOW.tar.bz2 $1/
}

basicMageModTree() {
	mkdir -p app/code/{local,community}
	mkdir -p app/etc/modules/
	if [[ $1 = "frontend" ]]; then
		mkdir -p app/design/frontend/base/default/layout
		mkdir -p app/design/frontend/base/default/template
		mkdir -p app/design/frontend/rwd/default/layout
		mkdir -p app/design/frontend/rwd/default/template
	fi
	if [[ $2 = "backend" ]]; then
		mkdir -p app/design/adminhtml/default/default/layout
		mkdir -p app/design/adminhtml/default/default/template
	fi
}

timestamp() {
	date +"%T"
	date +"%F"
}

remSpaceFNames() {
	rename -n "s/ \(copy\)/_dup_$(date +%d%m%Y)/" *
	rename "s/ \(copy\)/_dup_$(date +%d%m%Y)/" *
}

mageOverrider() {
	# Argument should full path to file including fileName
	argPath=$1;
	parentdir="$(dirname "$1")";
	finalPath=${parentdir/core/local};
	mkdir -p "$finalPath";
	#cp -v "$argPath" "$finalPath";
	cp "$argPath" "$finalPath";
	echo "Directory structure built and file copied to local!!!";
	echo -n "$finalPath" | xclip -selection c;
}

lastnhist() {
	if [ -e "$HISTFILE" ] ; then
		tail -n $1 "$HISTFILE" > ff && mv ff "$HISTFILE"
	fi
}

clearCacheLocalMage1x() {
	cd /var/www/html/$1
	php -r 'require "app/Mage.php"; Mage::app()->cleanCache();'
	php -r 'require "app/Mage.php"; Mage::app()->getCacheInstance()->flush();'
	# php -a 'require "app/Mage.php"; Mage::app()->cleanCache();'
	# php -a 'require "app/Mage.php"; Mage::app()->getCacheInstance()->flush();'
	cd ~
}

reIndexMage1x() {
	cd /var/www/html/$1
	php shell/indexer.php --reindexall
	cd ~
}

deleteAllByName() {
	find /var/www/html/$1/* -depth -name "$2*" -type f -exec rm {} \;
	find /var/www/html/$1/* -depth -name "$2" -type d -exec rm -rf "{}" \;
	cd /var/www/html/$1/
	find . -type f -exec chmod 644 {} \;
	find . -type d -exec chmod 755 {} \;
	chmod 550 mage
	cd ~
}

getMage1xEvents() {
	grep 'Mage::dispatchEvent' app/ -rsn > events.list
}

resetMagePermi() {
	cd /var/www/html/$1/
	sudo find . -type f -exec chmod 644 {} \;
	sudo find . -type d -exec chmod 755 {} \;
	sudo chmod 550 mage
	cd ~
}

<<"COMMENT"
Disabled function
rename_mage_module() {
	find ./ -type f -readable -writable -exec sed -i "s/$1/$2/g" {} \;
	shopt -s globstar && rename "s/$1/$2/" **;
	find . -name "*$1*" -exec bash -c "mv $0 ${0/$1/$2}" {} \;
}
COMMENT
source /bin/custom_functions.sh
## Compile this as `source ~/.bashrc`
